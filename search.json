[{"path":"https://justincally.github.io/weda/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 weda authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://justincally.github.io/weda/articles/camtrap-upload.html","id":"brief","dir":"Articles","previous_headings":"","what":"Brief","title":"Uploading camera trap records to database","text":"need process takes () camera trap raw data (ii) site information, (iii) project information uploads processes database consistent manner allows data across projects stored together.","code":""},{"path":"https://justincally.github.io/weda/articles/camtrap-upload.html","id":"input","dir":"Articles","previous_headings":"","what":"Input","title":"Uploading camera trap records to database","text":"tree inputs process: record table camera trap records/data (generated camtrapR) camera information/site information table (generated field data, e.g. proofsafe) single row details regarding project (generated manually)","code":""},{"path":"https://justincally.github.io/weda/articles/camtrap-upload.html","id":"process","dir":"Articles","previous_headings":"","what":"Process","title":"Uploading camera trap records to database","text":"uploading camera trap data undertaken several steps:","code":""},{"path":"https://justincally.github.io/weda/articles/camtrap-upload.html","id":"get-record-table","dir":"Articles","previous_headings":"Process","what":"Get record table","title":"Uploading camera trap records to database","text":"directory camera trap images tagged. images placed folder title station/site. example directory structure dummy data : opted allow two-tiered hierachical system camera trap data, ‘substation’ folder (e.g. ) allowing nested ‘site’ folder (e.g. 56505). camTrapR denotes hierachy Station Camera. databasing call Site Substation; SubStation nested within site. useful cases might multiple cameras deployed close one another site. extract camera trap data can use recordTable() function camtrapR. parameters use function listed tagging folder structure similar can keep follows. Note depending number metadata tags number columns data set may different. order camera trap records meet standard data format may need make changes. metadata tags denoted metadata_ prefix. See recordTableSample details.","code":"#> /home/runner/work/_temp/Library/weda/dummydata/images #> ├── 2602 #> │   └── 2602__2021-10-17__01-32-47(5).JPG #> ├── 43134 #> │   └── 43134__2021-11-16__18-15-26(22).JPG #> ├── 56505 #> │   ├── A #> │   │   └── 56505__2021-11-30__08-50-17(2).JPG #> │   └── B #> │       └── 56505__2021-11-30__08-50-57(59).JPG #> ├── 832 #> │   └── 832__2021-10-21__14-30-38(8).JPG #> └── 9941 #>     ├── 9941__2021-10-14__18-09-19(13).JPG #>     └── 9941__2021-11-03__14-32-21(11).JPG raw_camtrap_records <- recordTable(inDir  = system.file(\"dummydata/images\", package = \"weda\"),                                IDfrom = \"metadata\",                                 cameraID = \"directory\",                                 stationCol = \"SiteID\",                                camerasIndependent = TRUE,                                timeZone = Sys.timezone(location = TRUE),                                metadataSpeciesTag = \"Species\",                                 removeDuplicateRecords = FALSE,                                 returnFileNamesMissingTags = TRUE) %>%   rename(SubStation = Camera) %>%   mutate(SubStation = case_when(SiteID == SubStation ~ NA_character_,                                  TRUE ~ SubStation),           Iteration = 1L) #> 2602 :      1 images      |====                |   20% #> 43134:      1 images      |========            |   40% #> 56505:      2 images      |============        |   60% #> 832  :      1 images      |================    |   80% #> 9941 :      2 images      |====================|  100%  raw_camtrap_records %>%   kbl() %>%    kable_styling() %>%   scroll_box(width = \"100%\")"},{"path":"https://justincally.github.io/weda/articles/camtrap-upload.html","id":"standardise-species-names","dir":"Articles","previous_headings":"Process","what":"Standardise species names","title":"Uploading camera trap records to database","text":"case, species names Scientific names. order standardise data run function append common names data. function uses VBA names full list possibilities can obtained exported dataset: weda::vba_name_conversions (e.g. run View(weda::vba_name_conversions)). Firstly, can run function just check names conversion: seen , Rusa unicolor accepted scientific name. VBA sambar deer listed Cervus unicolor. can change code: ticks warnings means can move onto next step.","code":"standardise_species_names(raw_camtrap_records,                            format = \"scientific\",                            speciesCol = \"Species\",                           return_data = FALSE) #> Warning in standardise_species_names(raw_camtrap_records, format = #> \"scientific\", : No match found for Rusa unicolor. Please provide names within #> the VBA taxa list #> ✔ Dama dama -> Fallow Deer #> ✔ Dromaius novaehollandiae -> Emu #> ✔ Macropus giganteus -> Eastern Grey Kangaroo #> ✔ Vulpes vulpes -> Red Fox #> ✖ Rusa unicolor raw_camtrap_records_mod <- raw_camtrap_records %>%    mutate(Species = case_when(Species == \"Rusa unicolor\" ~ \"Cervus unicolor\",                               TRUE ~ Species))  raw_camtrap_records_standardised <- standardise_species_names(raw_camtrap_records_mod,                                                                format = \"scientific\",                                                                speciesCol = \"Species\") #> ✔ Cervus unicolor -> Sambar Deer #> ✔ Dama dama -> Fallow Deer #> ✔ Dromaius novaehollandiae -> Emu #> ✔ Macropus giganteus -> Eastern Grey Kangaroo #> ✔ Vulpes vulpes -> Red Fox"},{"path":"https://justincally.github.io/weda/articles/camtrap-upload.html","id":"format-operation-data","dir":"Articles","previous_headings":"Process","what":"Format operation data","title":"Uploading camera trap records to database","text":"Alongside camera trap records must table details camera trap deployment site location site. site information data users obtained field sheets proofsafe. format data based camera trap operation data used camtrapR (see data(camtraps) example ). example read example data necessary fields deployment. Alongside reading just format columns correct classes.","code":"operationdata <- readr::read_csv(system.file(\"dummydata/operationdata.csv\", package = \"weda\")) %>%   mutate(SiteID = as.character(SiteID),           Iteration = as.integer(Iteration)) #> Rows: 6 Columns: 15 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \",\" #> chr  (2): SubStation, CameraID #> dbl  (5): SiteID, Iteration, Latitude, Longitude, CameraHeight #> dttm (4): Problem1_from, Problem1_to, DateTimeDeploy, DateTimeRetrieve #> date (2): DateDeploy, DateRetrieve #> time (2): TimeDeploy, TimeRetrieve #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.  operationdata %>%   kbl() %>%   kable_styling() %>%   scroll_box(width = \"100%\")"},{"path":"https://justincally.github.io/weda/articles/camtrap-upload.html","id":"create-project-data-row","dir":"Articles","previous_headings":"Process","what":"Create Project Data Row","title":"Uploading camera trap records to database","text":"Alongside camera data camera site/station information also want develop row project information can link cameras camera trap records project. show columns project dataset. data one row can easily made following code:","code":"projectdata <- tibble(ProjectName = \"Monitoring deer distribution, abundance, and impacts across Victoria\",                       ProjectShortName = \"StatewideDeer\",                       DistanceSampling = TRUE,                        TerrestrialArboreal = \"Terrestrial\",                        AllSpeciesTagged = TRUE,                        BaitedUnbaited = \"Unbaited\",                        BaitType = \"None\")  projectdata %>%   kbl() %>%   kable_styling() %>%   scroll_box(width = \"100%\")"},{"path":"https://justincally.github.io/weda/articles/camtrap-upload.html","id":"data-checks","dir":"Articles","previous_headings":"Process","what":"Data checks","title":"Uploading camera trap records to database","text":"stage important look three datasets run data quality checks ensure sufficient data able properly linked. developed single R function fun checks (camera_trap_dq()). function uses pointblank R package run extensive data checks. data sufficient quality must pass checks. output camera_trap_dq() provides three data quality statements (one table). can use help identify errors data fix preparing data upload. &marker;SiteID  ✓ — ○ — — &marker;SubStation  ✓ — ○ — — &marker;Iteration  ✓ — ○ — — &marker;scientific_name  ✓ — ○ — — &marker;common_name  ✓ — ○ — — &marker;DateTimeOriginal  ✓ — ○ — — &marker;Date  ✓ — ○ — — &marker;Time  ✓ — ○ — — &marker;delta.time.secs  ✓ — ○ — — &marker;delta.time.mins  ✓ — ○ — — &marker;delta.time.hours  ✓ — ○ — — &marker;delta.time.days  ✓ — ○ — — &marker;Directory  ✓ — ○ — — &marker;FileName  ✓ — ○ — — &marker;n_images  ✓ — ○ — — &marker;HierarchicalSubject  ✓ — ○ — — &marker;metadata_Multiples  ✓ — ○ — — &marker;metadata_Distance  ✓ — ○ — —  ✓ — ○ — — &marker;SiteID  ✓ — ○ — — &marker;SubStation  ✓ — ○ — — &marker;scientific_name  ✓ — ○ — — &marker;common_name  ✓ — ○ — — &marker;Time  ✓ — ○ — — &marker;Directory  ✓ — ○ — — &marker;FileName  ✓ — ○ — — &marker;Iteration  ✓ — ○ — — &marker;metadata_Multiples  ✓ — ● — — &marker;SiteID 9941, 2602, 832, 43134, 56505, 56505  ✓ — ○ — — &marker;SubStation NA, NA, NA, NA, , B  ✓ — ○ — — &marker;scientific_name Macropus giganteus, Vulpes vulpes, Dromaius novaehollandiae, Cervus unicolor, Dama dama  ✓ — ○ — — &marker;common_name Eastern Grey Kangaroo, Red Fox, Emu, Sambar Deer, Fallow Deer  ✓ — ○ — — &marker;SiteID  ✓ — ○ — — &marker;scientific_name  ✓ — ○ — — &marker;common_name  ✓ — ○ — — &marker;Date  ✓ — ○ — — &marker;Time  ✓ — ○ — — &marker;DateTimeOriginal  ✓ — ○ — — &marker;Iteration  ✓ — ○ — — &marker;metadata_Multiples  ✓ — ● — &marker;Date  ✓ — ○ — — &marker;DateTimeOriginal  ✓ — ○ — — &marker;SiteID  ✓ — ○ — — &marker;SubStation  ✓ — ○ — — &marker;Iteration  ✓ — ○ — — &marker;Latitude  ✓ — ○ — — &marker;Longitude  ✓ — ○ — — &marker;DateDeploy  ✓ — ○ — — &marker;TimeDeploy  ✓ — ○ — — &marker;DateRetrieve  ✓ — ○ — — &marker;TimeRetrieve  ✓ — ○ — — &marker;Problem1_from  ✓ — ○ — — &marker;Problem1_to  ✓ — ○ — — &marker;DateTimeDeploy  ✓ — ○ — — &marker;DateTimeRetrieve  ✓ — ○ — — &marker;CameraHeight  ✓ — ○ — — &marker;CameraID  ✓ — ○ — —  ✓ — ○ — — &marker;SiteID  ✓ — ○ — — &marker;SubStation  ✓ — ○ — — &marker;CameraID  ✓ — ○ — — &marker;Latitude  ✓ — ○ — — &marker;Longitude  ✓ — ○ — — &marker;CameraHeight  ✓ — ○ — — &marker;DateDeploy  ✓ — ○ — — &marker;DateRetrieve  ✓ — ○ — — &marker;Iteration  ✓ — ○ — — &marker;DateTimeDeploy  ✓ — ○ — — &marker;DateTimeRetrieve  ✓ — ○ — — &marker;Problem1_from  ✓ — ○ — — &marker;Problem1_to  ✓ — ○ — — &marker;SiteID 2602, 43134, 56505, 56505, 832, 9941, 9941  ✓ — ○ — — &marker;SubStation NA, NA, , B, NA, NA, NA  ✓ — ○ — — &marker;Latitude [−60.55, −8.47]  ✓ — ○ — — &marker;Longitude [93.41, 173.34]  ✓ — ○ — — &marker;SiteID  ✓ — ○ — — &marker;Latitude  ✓ — ○ — — &marker;Longitude  ✓ — ○ — — &marker;DateDeploy  ✓ — ○ — — &marker;TimeDeploy  ✓ — ○ — — &marker;DateRetrieve  ✓ — ○ — — &marker;TimeRetrieve  ✓ — ○ — — &marker;DateTimeDeploy  ✓ — ○ — — &marker;DateTimeRetrieve  ✓ — ○ — — &marker;CameraHeight  ✓ — ○ — — &marker;CameraID  ✓ — ○ — — &marker;Iteration  ✓ — ○ — — 1  ✓ — ○ — — &marker;ProjectName  ✓ — ○ — — &marker;ProjectShortName  ✓ — ○ — — &marker;DistanceSampling  ✓ — ○ — — &marker;TerrestrialArboreal  ✓ — ○ — — &marker;AllSpeciesTagged  ✓ — ○ — — &marker;BaitedUnbaited  ✓ — ○ — — &marker;BaitType  ✓ — ○ — — &marker;DistanceSampling  ✓ — ○ — — &marker;AllSpeciesTagged  ✓ — ○ — — &marker;TerrestrialArboreal Terrestrial, Arboreal  ✓ — ○ — — &marker;BaitedUnbaited Baited, Unbaited  ✓ — ○ — — &marker;BaitType None, Creamed Honey, Small Mammal Bait, Predator Bait  ✓ — ○ — — can see data quality checks two issues fix re-running data quality: camera trap records metadata_Multiples class integer. camera trap records metadata_Multiples missing values. second point one individual photo tagged integer. cases 1. fix issues run:","code":"dq <- camera_trap_dq(camtrap_records = raw_camtrap_records_standardised,                      camtrap_operation = operationdata,                      project_information = projectdata)  dq[[1]] raw_camtrap_records_fixed <- raw_camtrap_records_standardised %>%   mutate(metadata_Multiples = coalesce(as.integer(metadata_Multiples), 1L)) #> Warning: There was 1 warning in `mutate()`. #> ℹ In argument: `metadata_Multiples = coalesce(as.integer(metadata_Multiples), #>   1L)`. #> Caused by warning in `list2()`: #> ! NAs introduced by coercion  dq2 <- camera_trap_dq(camtrap_records = raw_camtrap_records_fixed,                      camtrap_operation = operationdata,                      project_information = projectdata)  # We can check it is passing all tests with:  all(sapply(dq2, function(x) all(x[[\"validation_set\"]][[\"all_passed\"]]))) #> [1] TRUE"},{"path":"https://justincally.github.io/weda/articles/camtrap-upload.html","id":"prepare-data-for-upload","dir":"Articles","previous_headings":"Process","what":"Prepare data for upload","title":"Uploading camera trap records to database","text":"data quality issues fixed, data quality issues fixed can prepare data upload database. process (prepare_camtrap_upload()) generate IDs records (avoid duplicate records database) properly format data:","code":"data_for_upload <- prepare_camtrap_upload(dq2)"},{"path":"https://justincally.github.io/weda/articles/camtrap-upload.html","id":"upload-the-data","dir":"Articles","previous_headings":"Process","what":"Upload the data","title":"Uploading camera trap records to database","text":"Note uploading data need established connection database (e.g. con_odbc) R environment. See vignette database connection details Using data prepared upload made (data_for_upload) can upload data one line:","code":"upload_camtrap_data(con = con_odbc,                      data_list = data_for_upload,                      uploadername = \"Justin Cally\")"},{"path":"https://justincally.github.io/weda/articles/database-connect.html","id":"step-1-switch-on-vpn","dir":"Articles","previous_headings":"","what":"Step 1: Switch on VPN","title":"Connecting to the database","text":"Make sure Azure VPN running","code":""},{"path":"https://justincally.github.io/weda/articles/database-connect.html","id":"step-2-set-keyring-password-if-not-set","dir":"Articles","previous_headings":"","what":"Step 2: Set keyring password if not set","title":"Connecting to the database","text":"Set keyring already set. Password psql_user remembered Rstudio keychain set ","code":"if(nrow(keyring::key_list(\"ari-dev-weda-psql-01\")) == 0) { keyring::key_set(service = \"ari-dev-weda-psql-01\", username = \"psql_user\") }"},{"path":"https://justincally.github.io/weda/articles/database-connect.html","id":"step-3-check-capability","dir":"Articles","previous_headings":"","what":"Step 3: Check capability","title":"Connecting to the database","text":"Check correct odbc driver","code":"# Check odbc driver exists if(!(\"PostgreSQL Driver\" %in% odbc::odbcListDrivers()$name)) {   stop(\"Install the postgres driver to connect to database: https://odbc.postgresql.org/\") }"},{"path":"https://justincally.github.io/weda/articles/database-connect.html","id":"step-4-connect-to-database","dir":"Articles","previous_headings":"","what":"Step 4: Connect to database","title":"Connecting to the database","text":"Make connection object R","code":"# Note that the DB is currently configured to turn on at 7am and turn off at 7pm to reduce costs # ODBC Connection : more interactive in rstudio con_odbc <- RPostgreSQL::dbConnect(odbc::odbc(),                               Driver = \"PostgreSQL Driver\",                               Server = '10.110.7.201',                               Database = 'ari-dev-weda-psql-01',                               UID = \"psql_user\",                               PWD = keyring::key_get(service = \"ari-dev-weda-psql-01\", username = \"psql_user\"),                               Port = 5432,                               sslmode = 'require',                               maxvarcharsize = 0) # issue with binary representation of sf cols"},{"path":"https://justincally.github.io/weda/articles/database-connect.html","id":"step-5-view-data","dir":"Articles","previous_headings":"","what":"Step 5: View data","title":"Connecting to the database","text":"Interact database ‘Connections’ pane Rstudio use code example read data:","code":"#### Read and write tables #### DBI::dbWriteTable(con, Id(schema = \"test\", table = \"mtcars\"), mtcars)  # Use lazy evaluation to download a sample of mtcars data db_mtcars <- tbl(con, in_schema(\"test\", \"mtcars\")) %>%   filter(cyl == 6) %>%   collect()"},{"path":"https://justincally.github.io/weda/articles/database-connect.html","id":"additional-resources","dir":"Articles","previous_headings":"","what":"Additional Resources","title":"Connecting to the database","text":"can follow tutorial postgres database functionality :","code":"#### Setup #### library(DBI) library(dplyr) library(dbplyr) library(sf) library(rpostgis) library(RPostgres) library(odbc) library(raster)  # Set up keyring if not already set. Password for psql_user will be remembered in Rstudio keychain once you set it if(nrow(keyring::key_list(\"ari-dev-weda-psql-01\")) == 0) { keyring::key_set(service = \"ari-dev-weda-psql-01\", username = \"psql_user\") }  # Check odbc driver exists if(!(\"PostgreSQL Driver\" %in% odbc::odbcListDrivers()$name)) {   stop(\"Install the postgres driver to connect to database: https://odbc.postgresql.org/\") }  # Note that the DB is currently configured to turn on at 7am and turn off at 7pm to reduce costs # ODBC Connection : more interactive in rstudio con_odbc <- RPostgreSQL::dbConnect(odbc::odbc(),                               Driver = \"PostgreSQL Driver\",                               Server = '10.110.7.201',                               Database = 'ari-dev-weda-psql-01',                               UID = \"psql_user\",                               PWD = keyring::key_get(service = \"ari-dev-weda-psql-01\", username = \"psql_user\"),                               Port = 5432,                               sslmode = 'require',                               maxvarcharsize = 0) # issue with binary representation of sf cols  # Postgres connection: better for rasters (and easier to set up) con <- RPostgreSQL::dbConnect(RPostgres::Postgres(),                                host = '10.110.7.201',                                dbname = 'ari-dev-weda-psql-01',                                user = \"psql_user\",                                password = keyring::key_get(service = \"ari-dev-weda-psql-01\", username = \"psql_user\"),                                port = 5432,                                service = NULL,                                list(sslmode = \"require\"))  #### Read and write tables #### DBI::dbWriteTable(con, Id(schema = \"test\", table = \"mtcars\"), mtcars)  # Use lazy evaluation to download a sample of mtcars data db_mtcars <- tbl(con, in_schema(\"test\", \"mtcars\")) %>%   filter(cyl == 6) %>%   collect()  DBI::dbRemoveTable(con, Id(schema = \"test\", table = \"mtcars\"))  #### Spatial datasets (sf) #### nc <- st_read(system.file(\"shape/nc.shp\", package=\"sf\"))  # Write sf spatial data to db st_write(obj = nc,          dsn = con,          layer = Id(schema = \"test\", table = \"nc\"), delete_layer = TRUE)  tbl(con, in_schema(\"test\", \"nc\"))  # Pull down entire sf layer nc_db <- st_read(dsn = con,                  layer = Id(schema = \"test\", table = \"nc\"))  # Use postgis to download a part of a layer nc_wilson_dbplyr <- tbl(con, in_schema(\"test\", \"nc\")) %>%   filter(NAME == \"Wilson\") %>%   dplyr::select(AREA, NAME, geometry) %>%   mutate(geometry = ST_ASTEXT(geometry)) %>% #ST_ASTEXT is a postgis function and if dbplyr doesnt know what it is it passes it as such   collect() %>%   sf::st_as_sf(wkt = \"geometry\") # convert to sf  # alternatively you can use st_read with a query q <- tbl(con, in_schema(\"test\", \"nc\")) %>%   filter(NAME == \"Wilson\") %>%   dplyr::select(AREA, NAME, geometry) %>%   dbplyr:::remote_query()  # Pull down entire sf layer nc_wilson_sf <- st_read(dsn = con, query = q)  DBI::dbRemoveTable(con, Id(schema = \"test\", table = \"nc\"))  #### Raster Data #### # check if the database has PostGIS pgPostGIS(con)  r <- raster::raster(   nrows = 180, ncols = 360, xmn = -180, xmx = 180,   ymn = -90, ymx = 90, vals = 1 ) # Write Raster in the database pgWriteRast(con, name = c('test','raster'), raster = r, overwrite = TRUE)  #check raster pgListRast(con)  # get raster r2 <- rpostgis::pgGetRast(con, name = c('test','raster'), boundary = c(50, 0, 100, 0))  par(mfrow = c(1, 2)) plot(r) plot(r2)  DBI::dbRemoveTable(con, Id(schema = \"test\", table = \"raster\"))"},{"path":"https://justincally.github.io/weda/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Justin Cally. Author, maintainer.","code":""},{"path":"https://justincally.github.io/weda/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Cally J (2023). weda: Wildlife Ecology Data Analytics (weda) supports database connections use ARI. R package version 0.0.0.9000, https://justincally.github.io/weda/.","code":"@Manual{,   title = {weda: Wildlife Ecology Data Analytics (weda) supports database connections and use at ARI},   author = {Justin Cally},   year = {2023},   note = {R package version 0.0.0.9000},   url = {https://justincally.github.io/weda/}, }"},{"path":"https://justincally.github.io/weda/index.html","id":"weda","dir":"","previous_headings":"","what":"Wildlife Ecology Data Analytics (weda) supports database connections and use at ARI","title":"Wildlife Ecology Data Analytics (weda) supports database connections and use at ARI","text":"weda (Wildlife Ecology Data Analytics) R package users Arthur Rylah Institute connect use Wildlife Ecology database. package demonstrations upload data database (e.g. camera trap data). Functions package allow users format data standardised way, assess data quality interact database.","code":""},{"path":"https://justincally.github.io/weda/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Wildlife Ecology Data Analytics (weda) supports database connections and use at ARI","text":"can install development version weda GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"JustinCally/weda\")"},{"path":"https://justincally.github.io/weda/index.html","id":"functionality","dir":"","previous_headings":"","what":"Functionality","title":"Wildlife Ecology Data Analytics (weda) supports database connections and use at ARI","text":"weda currently supports following functionality: Uploading processing camera trap data Connecting database","code":""},{"path":"https://justincally.github.io/weda/reference/camera_trap_dq.html","id":null,"dir":"Reference","previous_headings":"","what":"Assesses the data quality of camera trap records, operations and project information — camera_trap_dq","title":"Assesses the data quality of camera trap records, operations and project information — camera_trap_dq","text":"Assesses data quality camera trap records, operations project information","code":""},{"path":"https://justincally.github.io/weda/reference/camera_trap_dq.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assesses the data quality of camera trap records, operations and project information — camera_trap_dq","text":"","code":"camera_trap_dq(camtrap_records, camtrap_operation, project_information)"},{"path":"https://justincally.github.io/weda/reference/camera_trap_dq.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assesses the data quality of camera trap records, operations and project information — camera_trap_dq","text":"camtrap_records dataframe contains camera trap records (recordTable camtrapR) camtrap_operation dataframe contains information camera trap operation project_information dataframe contains information project","code":""},{"path":"https://justincally.github.io/weda/reference/camera_trap_dq.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Assesses the data quality of camera trap records, operations and project information — camera_trap_dq","text":"list pointblank objects","code":""},{"path":"https://justincally.github.io/weda/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://justincally.github.io/weda/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://justincally.github.io/weda/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"https://justincally.github.io/weda/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling rhs(lhs).","code":""},{"path":"https://justincally.github.io/weda/reference/prepare_camtrap_upload.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare camera trap data for upload to the database — prepare_camtrap_upload","title":"Prepare camera trap data for upload to the database — prepare_camtrap_upload","text":"function takes list agents prepares data upload database.","code":""},{"path":"https://justincally.github.io/weda/reference/prepare_camtrap_upload.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare camera trap data for upload to the database — prepare_camtrap_upload","text":"","code":"prepare_camtrap_upload(agent_list)"},{"path":"https://justincally.github.io/weda/reference/prepare_camtrap_upload.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare camera trap data for upload to the database — prepare_camtrap_upload","text":"agent_list list pointblank agents (directly camera_trap_dq())","code":""},{"path":"https://justincally.github.io/weda/reference/prepare_camtrap_upload.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepare camera trap data for upload to the database — prepare_camtrap_upload","text":"list data frames","code":""},{"path":"https://justincally.github.io/weda/reference/prepare_camtrap_upload.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prepare camera trap data for upload to the database — prepare_camtrap_upload","text":"","code":"if (FALSE) { prepare_upload(agent_list) }"},{"path":"https://justincally.github.io/weda/reference/processed_SubStation_presence_absence.html","id":null,"dir":"Reference","previous_headings":"","what":"Presence/Absence Views — processed_SubStation_presence_absence","title":"Presence/Absence Views — processed_SubStation_presence_absence","text":"presence-absence data views site/substation (including daily presence-absence)","code":""},{"path":"https://justincally.github.io/weda/reference/processed_SubStation_presence_absence.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Presence/Absence Views — processed_SubStation_presence_absence","text":"","code":"processed_SubStation_presence_absence(con, return_data = FALSE, daily = FALSE)"},{"path":"https://justincally.github.io/weda/reference/processed_SubStation_presence_absence.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Presence/Absence Views — processed_SubStation_presence_absence","text":"con database connection return_data logical flag return data (TRUE) sql query (default FALSE) daily logical flag make query/data daily level (TRUE), per substation (FALSE)","code":""},{"path":"https://justincally.github.io/weda/reference/processed_SubStation_presence_absence.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Presence/Absence Views — processed_SubStation_presence_absence","text":"sql data.frame","code":""},{"path":"https://justincally.github.io/weda/reference/processed_SubStation_presence_absence.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Presence/Absence Views — processed_SubStation_presence_absence","text":"","code":"if (FALSE) { DBI::dbExecute(conn = con_odbc,                paste(SQL(\"CREATE VIEW test.processed_site_substation_presence_absence AS\"),                processed_SubStation_presence_absence(con = con_odbc, return_data = FALSE))) }"},{"path":"https://justincally.github.io/weda/reference/records_curated_view.html","id":null,"dir":"Reference","previous_headings":"","what":"Curated views — records_curated_view","title":"Curated views — records_curated_view","text":"Take raw records return recently modified row record","code":""},{"path":"https://justincally.github.io/weda/reference/records_curated_view.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Curated views — records_curated_view","text":"","code":"records_curated_view(con, return_data = FALSE)  operation_curated_view(con, return_data = FALSE)  project_curated_view(con, return_data = FALSE)"},{"path":"https://justincally.github.io/weda/reference/records_curated_view.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Curated views — records_curated_view","text":"con database connection return_data logical flag return data (TRUE) sql query (default FALSE)","code":""},{"path":"https://justincally.github.io/weda/reference/records_curated_view.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Curated views — records_curated_view","text":"sql data.frame","code":""},{"path":"https://justincally.github.io/weda/reference/records_curated_view.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Curated views — records_curated_view","text":"","code":"if (FALSE) { DBI::dbExecute(conn = con_odbc,                paste(DBI::SQL(\"CREATE VIEW test.curated_camtrap_records AS\"),                records_curated_view(con_odbc))) DBI::dbExecute(conn = con_odbc,                paste(DBI::SQL(\"CREATE VIEW test.curated_camtrap_operation AS\"),                operation_curated_view(con_odbc))) DBI::dbExecute(conn = con_odbc,                paste(DBI::SQL(\"CREATE VIEW test.curated_project_information AS\"),                project_curated_view(con_odbc))) }"},{"path":"https://justincally.github.io/weda/reference/standardise_species_names.html","id":null,"dir":"Reference","previous_headings":"","what":"This function standardises species names in a dataframe — standardise_species_names","title":"This function standardises species names in a dataframe — standardise_species_names","text":"function standardises species names dataframe","code":""},{"path":"https://justincally.github.io/weda/reference/standardise_species_names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"This function standardises species names in a dataframe — standardise_species_names","text":"","code":"standardise_species_names(   recordTable,   format = c(\"scientific\", \"common\"),   speciesCol = \"Species\",   return_data = TRUE )"},{"path":"https://justincally.github.io/weda/reference/standardise_species_names.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"This function standardises species names in a dataframe — standardise_species_names","text":"recordTable dataframe containing species names format format species names dataframe speciesCol column name species names dataframe return_data Whether return data just verbose name conversions","code":""},{"path":"https://justincally.github.io/weda/reference/standardise_species_names.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"This function standardises species names in a dataframe — standardise_species_names","text":"dataframe standardised species names","code":""},{"path":"https://justincally.github.io/weda/reference/standardise_species_names.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"This function standardises species names in a dataframe — standardise_species_names","text":"","code":"if (FALSE) { standardise_species_names(recordTable = recordTable,                           format = \"scientific\",                           speciesCol = \"Species\")                           }"},{"path":"https://justincally.github.io/weda/reference/upload_camtrap_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Upload camera trap data to database — upload_camtrap_data","title":"Upload camera trap data to database — upload_camtrap_data","text":"Upload camera trap data database","code":""},{"path":"https://justincally.github.io/weda/reference/upload_camtrap_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Upload camera trap data to database — upload_camtrap_data","text":"","code":"upload_camtrap_data(con, data_list, uploadername)"},{"path":"https://justincally.github.io/weda/reference/upload_camtrap_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Upload camera trap data to database — upload_camtrap_data","text":"con postgresql connection ari-dev-weda-psql-01 data_list list camera trap records, operations project information (output prepare_camtrap_upload()) uploadername name person uploading data","code":""},{"path":"https://justincally.github.io/weda/reference/upload_camtrap_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Upload camera trap data to database — upload_camtrap_data","text":"","code":"if (FALSE) { upload_camtrap_data(con = con_odbc, data_list = data_list, uploadername = \"Justin Cally\") }"},{"path":"https://justincally.github.io/weda/reference/vba_name_conversions.html","id":null,"dir":"Reference","previous_headings":"","what":"Name conversions between scientific and common names — vba_name_conversions","title":"Name conversions between scientific and common names — vba_name_conversions","text":"dataset containing scientific names common names taxa VBA","code":""},{"path":"https://justincally.github.io/weda/reference/vba_name_conversions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Name conversions between scientific and common names — vba_name_conversions","text":"","code":"data(vba_name_conversions)"},{"path":"https://justincally.github.io/weda/reference/vba_name_conversions.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Name conversions between scientific and common names — vba_name_conversions","text":"data frame 38,587 rows 2 variables","code":""},{"path":"https://justincally.github.io/weda/reference/vba_name_conversions.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Name conversions between scientific and common names — vba_name_conversions","text":"scientific_name. scientific name VBA common_name. common name VBA","code":""},{"path":"https://justincally.github.io/weda/news/index.html","id":"weda-0009000","dir":"Changelog","previous_headings":"","what":"weda 0.0.0.9000","title":"weda 0.0.0.9000","text":"Created package following functionality:","code":""}]
